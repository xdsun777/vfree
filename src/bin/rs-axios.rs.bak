use reqwest::{Client, Response, header};
use tokio;

pub struct AxiosConfig {
    url: String,
    headers: Option<reqwest::header::HeaderMap>,
    timeout: Option<std::time::Duration>,
}

impl AxiosConfig {
    pub fn new(url: String) -> Self {
        Self {
            url,
            headers: None,
            timeout: None,
        }
    }
    pub fn url(mut self, url: String) -> Self {
        if url.is_empty() {
            panic!("URL cannot be empty");
        }
        if !url.starts_with("http://") && !url.starts_with("https://") {
            panic!("URL must start with http:// or https://");
        }
        self.url = url;
        self
    }
    pub fn headers(mut self, headers: reqwest::header::HeaderMap) -> Self {
        self.headers = Some(headers);
        self
    }

    pub fn timeout(mut self, timeout: std::time::Duration) -> Self {
        self.timeout = Some(timeout);
        self
    }
}

pub fn init_config(
    url: &str,

    header: Option<reqwest::header::HeaderMap>,
    time: Option<std::time::Duration>,
) -> AxiosConfig {
    AxiosConfig::new(url.to_string())
        .headers(header.unwrap_or_else(|| {
            let mut headers = reqwest::header::HeaderMap::new();
            headers.insert(
                header::USER_AGENT,
                header::HeaderValue::from_static("rs-axios"),
            );
            headers
        }))
        .timeout(time.unwrap_or_else(|| std::time::Duration::from_secs(30)))
}

pub async fn get(config: AxiosConfig) -> Result<Response, reqwest::Error> {
    let response = Client::new()
        .request(reqwest::Method::GET, config.url)
        .send()
        .await?;
    Ok(response)
}

#[tokio::main]
async fn main() {
    let config_now = init_config(
        "http://localhost:3000/get",
        None,
        Some(std::time::Duration::from_secs(30)),
    );

    match get(config_now).await {
        Ok(response) => {
            println!("Response: {:?}", response.text().await);
        }
        Err(e) => {
            eprintln!("Error: {:?}", e);
        }
    }
}
